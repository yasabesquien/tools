global
    log /dev/log    local0
    log /dev/log    local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL). This list is from:
    #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    # An alternative list with additional directives can be obtained from
    #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options no-sslv3
    ssl-dh-param-file /opt/certbot/dhparams.pem

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

frontend happycoders_80
    bind *:80

    # Forward Certbot verification requests to the certbot-haproxy plugin
    acl is_certbot path_beg -i /.well-known/acme-challenge
    use_backend certbot if is_certbot

    # Redirect HTTP to HTTPS for all other cases
    redirect scheme https code 301 if !is_certbot

    default_backend happycoders_wordpress

{% if certbot_cert_check_result.stat.exists %}
frontend happycoders_443
    bind *:443 ssl crt /opt/certbot/haproxy_fullchains/__fallback.pem crt /opt/certbot/haproxy_fullchains alpn h2,http/1.1

    # Important, so that WordPress doesn't send a redirect to HTTPS ("https" must be in lowercase letters!)
    http-request set-header X-Forwarded-Proto https

    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

    # Redirect to https://www.happycoders.eu if another host name was specified.
    # Need to do this via a dummy backend + frontend as otherwise the HSTS response header would not be sent.
    # (see https://www.haproxy.com/de/blog/haproxy-and-http-strict-transport-security-hsts-header-in-http-redirects/)
    use_backend redirect_to_www_happycoders_eu if !{ hdr(host) -i www.happycoders.eu }

    default_backend happycoders_wordpress
{% else %}
    # SSL not yet activated because certificates do not exist yet.
    # To create the certificates, run:
    # sudo /opt/certbot/scripts/run-certbot
    # Then execute the playbook again.
{% endif %}

# This dummy backend is needed so that the HSTS response header is also being sent with a redirect (see comment above).
backend redirect_to_www_happycoders_eu
    server dummy_redirect_server 127.0.0.1:8002

# This dummy frontend is needed so that the HSTS response header is also being sent with a redirect (see comment above).
frontend redirect_to_www_happycoders_eu
    bind 127.0.0.1:8002
    redirect prefix https://www.happycoders.eu code 301

backend happycoders_wordpress
    mode http
    server server1 localhost:8001 check
    http-response del-header x-powered-by
{% if happycoders_testing|default(false) %}
    acl authorized http_auth(happycoders_test_users)
    acl wp-cron path_beg -i /wp-cron.php
    http-request auth realm HappyCoders.eu unless authorized or wp-cron

userlist happycoders_test_users
    user sven password X/UgQ53BouggY
{% endif %}

backend certbot
    log global
    mode http
    server certbot 127.0.0.1:8000
